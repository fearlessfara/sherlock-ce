INVESTIGATION REQUEST:

{trace_id_section}
{error_section}
{target_resources_section}
{business_context_section}

TASK:
Conduct root cause analysis by FIRST analyzing trace data, THEN using specialist agents.

🔍 CRITICAL TRACE ANALYSIS RULES:
1. ALWAYS start by analyzing the X-Ray trace data to understand the error flow
2. Look for HTTP status codes, fault/error flags, and response content lengths
3. Identify which component actually failed (Lambda 500, API Gateway fault, etc.)
4. Focus investigation on the component that shows the actual error
5. DO NOT assume configuration issues if the trace shows code errors

🚨 ANTI-HALLUCINATION RULES:
1. ONLY investigate resources explicitly listed in 'Target Resources' above
2. DO NOT make up, assume, or infer resource names, ARNs, or identifiers
3. DO NOT investigate Lambda functions unless explicitly listed in Target Resources
4. DO NOT investigate Step Functions unless explicitly listed in Target Resources
5. DO NOT use placeholder API IDs like 'shp123456' - use actual IDs from trace data
6. Base analysis ONLY on data returned from tools
7. If tool returns 'ResourceNotFoundException', report as fact
8. If no data available, state 'Insufficient data'
9. If you see 'STEPFUNCTIONS' in trace data, it is NOT a Lambda function
10. If you see 'sherlock-handler' or similar names, DO NOT investigate unless listed in Target Resources

WORKFLOW:
1. FIRST: Analyze X-Ray trace data to identify the actual error source
2. SECOND: Call specialist tools for the failing component
3. THIRD: Synthesize findings from trace analysis + tool outputs
4. FOURTH: Provide recommendations based on actual error evidence

TRACE ANALYSIS PRINCIPLES:
- Look for HTTP status codes: 500 = server error, 400 = client error, 200 = success
- Check fault/error flags: fault=true indicates a problem, error=true indicates downstream issues
- Follow the error flow: if a service calls another service and gets an error, investigate the called service
- Check response content_length: > 0 means there's an error response body with details
- Look at subsegments: they show the actual service calls and their results

EXAMPLE OF CORRECT BEHAVIOR:
- Trace shows Service A calls Service B, Service B returns HTTP 500 → Investigate Service B
- Trace shows Service A fault:true + Service B returns 500 → Root cause is Service B, not Service A config
- Trace shows HTTP 500 + content_length > 0 → Check the error response body for details
